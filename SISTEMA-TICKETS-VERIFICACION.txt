═══════════════════════════════════════════════════════════════
🎫 SISTEMA DE TICKETS: VERIFICACIÓN Y FUNCIONAMIENTO
═══════════════════════════════════════════════════════════════

✅ PROBLEMAS CORREGIDOS:

1. ✅ Botón "Contactar Soporte" en resumen del dashboard de cliente
   → ANTES: onclick="showSection('soporte')" ❌
   → AHORA: onclick="showSection('contactar')" ✅

═══════════════════════════════════════════════════════════════
📋 CÓMO FUNCIONA EL SISTEMA DE TICKETS
═══════════════════════════════════════════════════════════════

🔵 FLUJO COMPLETO:

1. CLIENTE CREA TICKET:
   ├── Dashboard Cliente → "Contactar" → "Crear Ticket"
   ├── Llena: Asunto, Categoría, Descripción
   ├── Prioridad asignada automáticamente según plan:
   │   • Premium: Alta
   │   • Avanzado: Media
   │   • Básico: Baja
   ├── POST /api/tickets
   ├── Base de datos:
   │   • status: 'abierto'
   │   • admin_unread: 1 (Admin NO lo ha leído)
   │   • client_unread: 0 (Cliente lo acaba de crear)
   ├── Emails enviados:
   │   • ✉️ Admin: "Nuevo Ticket #X"
   │   • ✉️ Cliente: "Ticket Recibido #X"
   └── Badge aparece en Admin Dashboard: 🔵 1

2. ADMIN VE Y RESPONDE TICKET:
   ├── Admin Dashboard → "Tickets" → "Ver ticket #X"
   ├── GET /api/tickets/:id?markAsRead=admin
   ├── Base de datos:
   │   • admin_unread: 0 (Admin lo acaba de leer)
   ├── Admin escribe respuesta y envía
   ├── PATCH /api/tickets/:id
   │   {
   │     "admin_response": "Hola, te ayudo...",
   │     "status": "en_proceso"
   │   }
   ├── Base de datos:
   │   • status: 'en_proceso'
   │   • admin_response: "Hola, te ayudo..."
   │   • admin_response_at: timestamp
   │   • admin_unread: 0 (Admin lo envió)
   │   • client_unread: 1 (Cliente NO lo ha leído)
   ├── Email enviado:
   │   • ✉️ Cliente: "Respuesta a tu Ticket #X"
   └── Badge aparece en Cliente Dashboard: 🔵 1

3. CLIENTE VE RESPUESTA Y RESPONDE:
   ├── Dashboard Cliente → "Contactar" → "Mis Tickets" → Ticket #X
   ├── GET /api/tickets/:id?markAsRead=client
   ├── Base de datos:
   │   • client_unread: 0 (Cliente lo acaba de leer)
   ├── Cliente escribe respuesta en el formulario
   ├── POST /api/tickets/:ticketId/client-response
   │   {
   │     "client_response": "Gracias, pero tengo otra duda...",
   │     "client_id": 123
   │   }
   ├── Base de datos:
   │   • status: 'en_proceso'
   │   • client_response: "Gracias, pero..."
   │   • client_response_at: timestamp
   │   • admin_unread: 1 (Admin NO lo ha leído)
   │   • client_unread: 0 (Cliente lo envió)
   ├── Email enviado:
   │   • ✉️ Admin: "Nueva Respuesta del Cliente - Ticket #X"
   └── Badge aparece en Admin Dashboard: 🔵 1

4. ADMIN CIERRA TICKET:
   ├── Admin responde y selecciona "Cerrado"
   ├── PATCH /api/tickets/:id
   │   {
   │     "admin_response": "Todo resuelto!",
   │     "status": "cerrado"
   │   }
   ├── Base de datos:
   │   • status: 'cerrado'
   │   • closed_at: timestamp
   └── Ya no se puede responder (conversación cerrada)

═══════════════════════════════════════════════════════════════
🔔 SISTEMA DE BADGES (MENSAJES SIN LEER)
═══════════════════════════════════════════════════════════════

CLIENTE DASHBOARD:

📍 Ubicación de badges:
1. Menú lateral izquierdo: "💬 Contactar" → Badge azul con número
2. Header de la sección "Contactar": Badge azul con número

🔄 Actualización automática:
• Polling cada 15 segundos
• Función: updateUnreadBadge()
• Endpoint: GET /api/tickets/client/:clientId
• Filtra tickets con: client_unread === 1
• Excluye tickets de categoría "facturacion"

📊 Estados visuales:
• Sin mensajes: Badge oculto
• Con mensajes: Badge visible con número (ej: "2")
• Color: Azul corporativo (#0046FE)

═══════════════════════════════════════════════════════════════

ADMIN DASHBOARD:

📍 Ubicación de badges:
1. Menú lateral: "🎫 Tickets" → Badge azul con número
2. Menú lateral: "📋 Pedidos" → Badge azul con número

🔄 Actualización automática:
• Polling cada 15 segundos
• Función: updateAdminBadges()
• Endpoints:
  - GET /api/tickets → Filtra admin_unread === 1
  - GET /api/admin/submissions → Filtra has_modifications === true

📊 Estados visuales:
• Sin mensajes: Badge oculto
• Con mensajes: Badge visible con número
• Color: Azul corporativo (#0046FE)

═══════════════════════════════════════════════════════════════
🧪 CÓMO PROBAR EL SISTEMA
═══════════════════════════════════════════════════════════════

PASO 1: Esperar deploy de Vercel (~1-2 minutos)

PASO 2: Crear ticket desde cliente
   1. Login como cliente en: https://agutidesigns.vercel.app/client-dashboard/
   2. Clic en página de resumen → Botón "💬 Contactar Soporte"
   3. ✅ DEBE redirigir a sección "Contactar"
   4. Clic en "Crear Ticket de Soporte"
   5. Llenar: Asunto, Categoría, Descripción
   6. Clic en "Enviar Ticket"
   7. ✅ DEBE aparecer notificación: "Ticket creado correctamente"

PASO 3: Verificar en admin
   1. Ir a: https://agutidesigns.vercel.app/admin-dashboard/
   2. ✅ DEBE aparecer badge azul en "🎫 Tickets" con "1"
   3. Clic en "Tickets"
   4. ✅ DEBE aparecer el nuevo ticket en la tabla
   5. Clic en "Ver ticket"
   6. ✅ DEBE abrir modal con detalles del ticket
   7. ✅ Badge debe desaparecer (marcado como leído)

PASO 4: Admin responde
   1. En el modal del ticket, escribir respuesta
   2. Seleccionar estado: "En Proceso"
   3. Clic en "Enviar Respuesta"
   4. ✅ DEBE aparecer notificación: "Respuesta enviada correctamente"
   5. ✅ Modal se cierra

PASO 5: Verificar en cliente
   1. Volver al dashboard del cliente
   2. ✅ DEBE aparecer badge azul en "💬 Contactar" con "1"
   3. Ir a "Contactar" → "Mis Tickets"
   4. ✅ Ticket debe tener:
      • Estado: "En Proceso"
      • "Mensaje nuevo sin leer" (punto azul)
      • Fondo azul claro
   5. Clic en el ticket
   6. ✅ DEBE mostrar:
      • Respuesta del admin en cuadro verde
      • Formulario para responder
   7. ✅ Badge debe desaparecer (marcado como leído)

PASO 6: Cliente responde
   1. Escribir respuesta en el formulario
   2. Clic en "Enviar Respuesta"
   3. ✅ DEBE aparecer notificación: "Respuesta enviada"
   4. ✅ Respuesta aparece en cuadro azul

PASO 7: Verificar en admin otra vez
   1. Volver al admin dashboard
   2. ✅ DEBE aparecer badge azul en "🎫 Tickets" con "1"
   3. Ir a "Tickets"
   4. ✅ Ticket debe mostrar: "Respuesta recibida" o similar
   5. Abrir ticket
   6. ✅ DEBE mostrar la respuesta del cliente

PASO 8: Admin cierra ticket
   1. Escribir respuesta final
   2. Seleccionar estado: "Cerrado"
   3. Clic en "Enviar Respuesta"
   4. ✅ Ticket cerrado

PASO 9: Verificar en cliente
   1. Recargar "Mis Tickets"
   2. ✅ Ticket debe mostrar:
      • Estado: "Cerrado"
      • "Conversación cerrada" ✅
      • NO se puede responder más

═══════════════════════════════════════════════════════════════
🐛 POSIBLES PROBLEMAS Y SOLUCIONES
═══════════════════════════════════════════════════════════════

PROBLEMA 1: Badge no aparece después de responder
CAUSA: Polling no está ejecutándose o hay error en el endpoint
SOLUCIÓN:
   1. Abrir consola del navegador (F12)
   2. Buscar errores en la consola
   3. Verificar que aparece cada 15s:
      • Cliente: "🔔 [CLIENT] Actualizando badge..."
      • Admin: "🔔 [ADMIN] Actualizando badges..."
   4. Si no aparece, recargar página (F5)

PROBLEMA 2: Tickets no se envían
CAUSA: Error en el backend o campos faltantes
SOLUCIÓN:
   1. Abrir consola del navegador (F12)
   2. Buscar errores de red (pestaña Network)
   3. Ver logs de Railway:
      • Ir a Railway → Logs
      • Buscar: "🎫 [BACKEND] Nuevo ticket recibido"
   4. Verificar que todos los campos están llenos

PROBLEMA 3: Admin no puede responder
CAUSA: Error en el endpoint PATCH
SOLUCIÓN:
   1. Abrir consola del navegador (F12)
   2. Buscar: "❌ [ADMIN] Error enviando respuesta"
   3. Ver logs de Railway:
      • Buscar: "🎫 [BACKEND] PATCH /api/tickets/:ticketId"
      • Ver si hay error
   4. Verificar que el textarea tiene contenido

PROBLEMA 4: Badge no desaparece al abrir ticket
CAUSA: markAsRead no está funcionando
SOLUCIÓN:
   1. Verificar URL al abrir ticket:
      • Cliente: /api/tickets/:id?markAsRead=client
      • Admin: /api/tickets/:id?markAsRead=admin
   2. Ver logs de Railway:
      • "👁️ [BACKEND] Marcando ticket como leído por..."
   3. Si no aparece, el parámetro no se está enviando

PROBLEMA 5: Tickets de cambio de plan aparecen
CAUSA: Filtro de categoría "facturacion" no funciona
SOLUCIÓN:
   • Verificar en consola:
     "🎫 [CLIENT] Tickets después de filtrar facturación: X"
   • Si muestra más de los esperados, revisar filtro

═══════════════════════════════════════════════════════════════
📊 ENDPOINTS INVOLUCRADOS
═══════════════════════════════════════════════════════════════

✅ POST /api/tickets
   • Crear nuevo ticket
   • Body: { client_id, subject, category, description, priority }
   • Response: { ticketId, success }

✅ GET /api/tickets/:id?markAsRead=(admin|client)
   • Obtener detalles de un ticket
   • Marca como leído según parámetro
   • Response: { ticket object }

✅ GET /api/tickets/client/:clientId
   • Obtener todos los tickets de un cliente
   • Response: { tickets: [ ... ] }

✅ GET /api/tickets
   • Obtener todos los tickets (admin)
   • Response: [ tickets ]

✅ PATCH /api/tickets/:ticketId
   • Admin responde y actualiza estado
   • Body: { admin_response, status }
   • Response: { success, ticket }

✅ POST /api/tickets/:ticketId/client-response
   • Cliente responde a un ticket
   • Body: { client_response, client_id }
   • Response: { success, ticket }

═══════════════════════════════════════════════════════════════
✅ ESTADO ACTUAL
═══════════════════════════════════════════════════════════════

• Botón "Contactar Soporte": CORREGIDO ✅
• Sistema de tickets: FUNCIONANDO ✅
• Badges de mensajes sin leer: FUNCIONANDO ✅
• Polling automático: ACTIVO (15s) ✅
• Marcado como leído: FUNCIONANDO ✅
• Emails de notificación: ACTIVOS ✅
• Conversación bidireccional: COMPLETA ✅

Deploy: ~1-2 minutos en Vercel ⏱️

TODO LISTO PARA PROBAR 🚀

═══════════════════════════════════════════════════════════════

